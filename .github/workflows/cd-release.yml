name: CD Release Pipeline
permissions:
  contents: write

on:
  push:
    tags:
      - 'v*.*.*'  # ej: v1.0.0

concurrency:
  group: cd-render-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build & Test (FastAPI)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest

      - name: Run tests
        run: |
          if command -v pytest >/dev/null 2>&1; then
            pytest -q
          else
            echo "pytest no instalado"; exit 1
          fi

  release:
    name: Create GitHub Release
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Usa softprops/action-gh-release (evita set-output deprecado)
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Nueva versi√≥n liberada: ${{ github.ref_name }}
            Release generado autom√°ticamente por el pipeline de CD.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy to Render (API + Poll)
    needs: release
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Trigger deploy
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail

          # Validaciones m√≠nimas
          test -n "${RENDER_API_KEY:-}"    || { echo "Falta RENDER_API_KEY"; exit 1; }
          test -n "${RENDER_SERVICE_ID:-}" || { echo "Falta RENDER_SERVICE_ID"; exit 1; }

          # Disparar deploy y capturar status + cuerpo
          HTTP_CODE=$(mktemp)
          RESP_BODY=$(mktemp)

          curl -sS -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -d '{}' \
            -w "%{http_code}" -o "$RESP_BODY" > "$HTTP_CODE" || {
              echo "‚ùå curl fall√≥ al invocar la API de Render"
              exit 1
            }

          code=$(cat "$HTTP_CODE")
          echo "HTTP code: $code"

          # Mostrar un resumen del cuerpo por si hay error
          echo "Respuesta (primeras 400 chars):"
          head -c 400 "$RESP_BODY" || true
          echo

          if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
            echo "‚ùå La API devolvi√≥ un status no-2xx. Abortando."
            exit 1
          fi

          # Verificamos que el cuerpo no est√© vac√≠o
          if [ ! -s "$RESP_BODY" ]; then
            echo "‚ùå Respuesta vac√≠a de la API de Render."
            exit 1
          fi

          # Extraer deploy_id con Python (solo si es JSON v√°lido)
          DEPLOY_ID=$(python - <<'PY' "$RESP_BODY"
          import sys, json
          p = sys.argv[1]
          with open(p, 'rb') as f:
              data = json.load(f)
          print(data.get("id",""))
          PY
          )
          if [ -z "$DEPLOY_ID" ]; then
            echo "‚ùå No se pudo extraer 'id' del JSON de respuesta."
            echo "Cuerpo completo:"
            cat "$RESP_BODY"
            exit 1
          fi

          echo "deploy_id=$DEPLOY_ID" >> "$GITHUB_OUTPUT"
          echo "üöÄ Deploy disparado: $DEPLOY_ID"


      - name: Wait until LIVE
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          set -euo pipefail
          test -n "${DEPLOY_ID:-}" || { echo "No se obtuvo DEPLOY_ID"; exit 1; }

          TIMEOUT=1200    # 20 minutos
          INTERVAL=10
          ELAPSED=0

          is_terminal() {
            case "$1" in
              live|deactivated|failed|canceled) return 0 ;;
              *) return 1 ;;
            esac
          }

          while : ; do
            HTTP_CODE=$(mktemp)
            RESP_BODY=$(mktemp)

            curl -sS "https://api.render.com/v1/deploys/${DEPLOY_ID}" \
              -H "Authorization: Bearer ${RENDER_API_KEY }}" \
              -H "Accept: application/json" \
              -w "%{http_code}" -o "$RESP_BODY" > "$HTTP_CODE" || {
                echo "‚ùå curl fall√≥ al consultar el deploy"
                exit 1
              }

            code=$(cat "$HTTP_CODE")
            if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
              echo "‚ùå Status no-2xx al consultar deploy ($code)"
              head -c 400 "$RESP_BODY" || true
              exit 1
            fi

            STATUS=$(python - <<'PY' "$RESP_BODY"
            import sys, json
            p=sys.argv[1]
            with open(p,'rb') as f:
                data=json.load(f)
            print(data.get("status",""))
            PY
            )
                        PHASE=$(python - <<'PY' "$RESP_BODY"
            import sys, json
            p=sys.argv[1]
            with open(p,'rb') as f:
                data=json.load(f)
            print(data.get("phase",""))
            PY
            )
            echo "‚è≥ Estado: $STATUS | Fase: $PHASE (t=${ELAPSED}s)"

            if [ "$STATUS" = "live" ]; then
              echo "‚úÖ Deploy LIVE"
              exit 0
            fi

            if is_terminal "$STATUS"; then
              echo "‚ùå Deploy en estado terminal: $STATUS"
              echo "Detalle (primeras 600 chars):"
              head -c 600 "$RESP_BODY" || true
              exit 1
            fi

            sleep "$INTERVAL"
            ELAPSED=$((ELAPSED+INTERVAL))
            if [ $ELAPSED -ge $TIMEOUT ]; then
              echo "‚è±Ô∏è Timeout esperando que el deploy quede LIVE"
              echo "√öltima respuesta:"
              head -c 600 "$RESP_BODY" || true
              exit 1
            fi
          done
